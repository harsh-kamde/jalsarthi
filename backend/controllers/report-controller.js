const Report = require('../models/report');
const WaterUsage = require('../models/waterusage');
const Household = require('../models/household');
const User = require('../models/user-model');

// Generate Monthly or Yearly Report with HTML Response
const generateReport = async (req, res) => {
    try {
        const { wardId, period } = req.body;
        console.log(req.body);
        if (!['monthly', 'yearly'].includes(period)) {
            return res.status(400).send({ error: "Invalid period. Use 'monthly' or 'yearly'." });
        }

        // Calculate start and end dates based on period
        let startDate, endDate;
        const today = new Date();
        
        if (period === 'monthly') {
            startDate = new Date(today.getFullYear(), today.getMonth(), 1);
            endDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);
        } else if (period === 'yearly') {
            startDate = new Date(today.getFullYear(), 0, 1);
            endDate = new Date(today.getFullYear() + 1, 0, 0);
        }
        console.log("startDate:", startDate);
        console.log("endDate:", endDate);

        const totalUsage = await WaterUsage.aggregate([
            { $match: { ward: wardId, timestamp: { $gte: startDate, $lte: endDate } } },
            { $group: { _id: null, total: { $sum: "$usage" } } }
        ]);
        console.log(totalUsage);
        const householdCount = await Household.countDocuments({ ward: wardId });
        const averageUsagePerHousehold = householdCount > 0 ? (totalUsage[0]?.total || 0) / householdCount : 0;

        const leakageDetected = false; // Placeholder logic, needs proper implementation

        const report = new Report({
            ward: wardId,
            period: period,
            startDate: startDate,
            endDate: endDate,
            totalUsage: totalUsage[0]?.total || 0,
            averageUsagePerHousehold: averageUsagePerHousehold,
            leakageDetected: leakageDetected
        });
        console.log("report:", report);
        await report.save();

        // Generate HTML report
        const htmlReport = generateHTMLReport({
            wardId: wardId,
            period: period,
            startDate: startDate,
            endDate: endDate,
            totalUsage: totalUsage[0]?.total || 0,
            averageUsagePerHousehold: averageUsagePerHousehold,
            leakageDetected: leakageDetected
        });

        res.status(201).send(htmlReport);
    } catch (error) {
        res.status(400).send({ error: "Failed to generate report." });
    }
};

const generateHTMLReport = (data) => {
  return `
<!DOCTYPE html>
<html>
<head>
  <style>
    body {
      margin: 0;
      padding: 20px;
      color: #e78610;
      width: 100%;
    }
    h3 {
      color: #e78610;
      border-bottom: 2px solid #e78610;
      padding-bottom: 5px;
      font-size: 1.15rem;
      font-weight: 500
    }
    .metrics {
      margin-bottom: 20px;
    }
    .metrics p {
      margin: 5px 0;
    }
    .metrics ul {
      padding-left: 20px;
    }
    .metrics ul li {
      margin-bottom: 5px;
    }
    .summary {
      margin-top: 30px;
      padding: 5px;
      color: #302e4d;
      border-radius: 5px;
      background-color:#E4D00A;
    }
    .header-image {
      width: 100%;
      border-radius: 10px 10px 0 0;
      margin-bottom: 1rem;
    }
    .summary p {
      margin: 10px 0;
      text-align: center;
      color:#f2f2f2;
    }
  </style>
</head>
<body>
  <div class="container">
    <img src="https://i.ibb.co/5nb5tM0/report-header.png" alt="Water Management Image" class="header-image">
    <p><strong>Title:</strong> Water Management ${data.period.charAt(0).toUpperCase() + data.period.slice(1)} Report</p>
    <p><strong>Date:</strong> ${new Date().toLocaleDateString()}</p>

    <div class="metrics">
      <h3>Usage Metrics</h3>
      <p>Total Water Usage: ${data.totalUsage} liters</p>
      <p>Average Usage Per Household: ${data.averageUsagePerHousehold.toFixed(2)} liters</p>
      <p>Leakage Detected: ${data.leakageDetected ? "Yes" : "No"}</p>
    </div>

    <div class="summary">
      <p>Generated by JalSaarthi</p>
    </div>
  </div>
</body>
</html>
  `;
};

// Get Reports Within Start and End Date
const getReportsByDateRange = async (req, res) => {
    try {
        const { startDate, endDate } = req.query;
        if (!startDate || !endDate) {
            return res.status(400).send({ error: "Please provide both startDate and endDate." });
        }

        const reports = await Report.find({
            startDate: { $gte: new Date(startDate) },
            endDate: { $lte: new Date(endDate) }
        }).populate('ward');

        res.status(200).send(reports);
    } catch (error) {
        res.status(500).send({ error: "Failed to retrieve reports by date range." });
    }
};

// Update Report
const updateReport = async (req, res) => {
    try {
        const report = await Report.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (!report) {
            return res.status(404).send({ error: "Report not found." });
        }
        res.status(200).send(report);
    } catch (error) {
        res.status(400).send({ error: "Failed to update report." });
    }
};

// Get Report
const getReports = async (req, res) => {
    try {
        const report = await Report.find();
        if (!report) {
            return res.status(404).send({ error: "Report not found." });
        }
        res.status(200).send(report);
    } catch (error) {
        res.status(400).send({ error: "Failed to get report." });
    }
};

// Delete Report
const deleteReport = async (req, res) => {
    try {
        const result = await Report.findByIdAndDelete(req.params.id);
        if (!result) {
            return res.status(404).send({ error: "Report not found." });
        }
        res.status(200).send({ message: "Report deleted successfully" });
    } catch (error) {
        res.status(500).send({ error: "Failed to delete report." });
    }
};

// Get Dashboard Data
const getDashboardData = async (req, res) => {
    try {
        const totalHouseholds = await Household.countDocuments();
        const totalUsers = await User.countDocuments({ role: 'user' });
        
        const totalUsage = await WaterUsage.aggregate([
            { $group: { _id: null, total: { $sum: "$usage" } } }
        ]);

        const totalUsageToday = await WaterUsage.aggregate([
            { 
                $match: { 
                    timestamp: { 
                        $gte: new Date(new Date().setHours(0, 0, 0, 0)), 
                        $lt: new Date(new Date().setHours(23, 59, 59, 999)) 
                    } 
                } 
            },
            { $group: { _id: null, total: { $sum: "$usage" } } }
        ]);

        const monthlyUsage = await WaterUsage.aggregate([
            { 
                $match: { 
                    timestamp: { 
                        $gte: new Date(new Date().getFullYear(), new Date().getMonth(), 1), 
                        $lt: new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0) 
                    } 
                } 
            },
            { $group: { _id: null, total: { $sum: "$usage" } } }
        ]);

        const yearlyUsage = await WaterUsage.aggregate([
            { 
                $match: { 
                    timestamp: { 
                        $gte: new Date(new Date().getFullYear(), 0, 1), 
                        $lt: new Date(new Date().getFullYear(), 12, 31) 
                    } 
                } 
            },
            { $group: { _id: null, total: { $sum: "$usage" } } }
        ]);

        const recentReports = await Report.find().sort({ createdAt: -1 }).limit(5);

        res.status(200).send({
            totalHouseholds,
            totalUsers,
            totalUsage: totalUsage[0]?.total || 0,
            totalUsageToday: totalUsageToday[0]?.total || 0,
            monthlyUsage: monthlyUsage[0]?.total || 0,
            yearlyUsage: yearlyUsage[0]?.total || 0,
            recentReports
        });
    } catch (error) {
        res.status(500).send({ error: "Failed to retrieve dashboard data." });
    }
};

module.exports = { generateReport, getReports ,getReportsByDateRange, updateReport, deleteReport, getDashboardData };